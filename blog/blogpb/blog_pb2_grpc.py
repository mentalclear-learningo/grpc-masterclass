# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import blog_pb2 as blog__pb2


class BlogServiceStub(object):
    """BlogService is the service definition for BlogService, 
    the service is there to imitate blog service gRPC.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateBlog = channel.unary_unary(
                '/blog.BlogService/CreateBlog',
                request_serializer=blog__pb2.CreateBlogRequest.SerializeToString,
                response_deserializer=blog__pb2.CreateBlogResponse.FromString,
                )
        self.ReadBlog = channel.unary_unary(
                '/blog.BlogService/ReadBlog',
                request_serializer=blog__pb2.ReadBlogRequest.SerializeToString,
                response_deserializer=blog__pb2.ReadBlogResponse.FromString,
                )
        self.UpdateBlog = channel.unary_unary(
                '/blog.BlogService/UpdateBlog',
                request_serializer=blog__pb2.UpdateBlogRequest.SerializeToString,
                response_deserializer=blog__pb2.UpdateBlogResponse.FromString,
                )
        self.DeleteBlog = channel.unary_unary(
                '/blog.BlogService/DeleteBlog',
                request_serializer=blog__pb2.DeleteBlogRequest.SerializeToString,
                response_deserializer=blog__pb2.DeleteBlogResponse.FromString,
                )
        self.ListBlog = channel.unary_stream(
                '/blog.BlogService/ListBlog',
                request_serializer=blog__pb2.ListBlogRequest.SerializeToString,
                response_deserializer=blog__pb2.ListBlogResponse.FromString,
                )


class BlogServiceServicer(object):
    """BlogService is the service definition for BlogService, 
    the service is there to imitate blog service gRPC.
    """

    def CreateBlog(self, request, context):
        """CreateBlog is the RPC to create a blog.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadBlog(self, request, context):
        """ReadBlog is the RPC to read a blog.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBlog(self, request, context):
        """UpdateBlog is the RPC to update a blog.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteBlog(self, request, context):
        """DeleteBlog is the RPC to delete a blog.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBlog(self, request, context):
        """ListBlog is the RPC to list all blogs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BlogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateBlog': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBlog,
                    request_deserializer=blog__pb2.CreateBlogRequest.FromString,
                    response_serializer=blog__pb2.CreateBlogResponse.SerializeToString,
            ),
            'ReadBlog': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadBlog,
                    request_deserializer=blog__pb2.ReadBlogRequest.FromString,
                    response_serializer=blog__pb2.ReadBlogResponse.SerializeToString,
            ),
            'UpdateBlog': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBlog,
                    request_deserializer=blog__pb2.UpdateBlogRequest.FromString,
                    response_serializer=blog__pb2.UpdateBlogResponse.SerializeToString,
            ),
            'DeleteBlog': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteBlog,
                    request_deserializer=blog__pb2.DeleteBlogRequest.FromString,
                    response_serializer=blog__pb2.DeleteBlogResponse.SerializeToString,
            ),
            'ListBlog': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBlog,
                    request_deserializer=blog__pb2.ListBlogRequest.FromString,
                    response_serializer=blog__pb2.ListBlogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'blog.BlogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BlogService(object):
    """BlogService is the service definition for BlogService, 
    the service is there to imitate blog service gRPC.
    """

    @staticmethod
    def CreateBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blog.BlogService/CreateBlog',
            blog__pb2.CreateBlogRequest.SerializeToString,
            blog__pb2.CreateBlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blog.BlogService/ReadBlog',
            blog__pb2.ReadBlogRequest.SerializeToString,
            blog__pb2.ReadBlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blog.BlogService/UpdateBlog',
            blog__pb2.UpdateBlogRequest.SerializeToString,
            blog__pb2.UpdateBlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/blog.BlogService/DeleteBlog',
            blog__pb2.DeleteBlogRequest.SerializeToString,
            blog__pb2.DeleteBlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBlog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/blog.BlogService/ListBlog',
            blog__pb2.ListBlogRequest.SerializeToString,
            blog__pb2.ListBlogResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
